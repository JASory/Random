/*

  Project that strives to produce a memory and  arithmetic efficient test in the interval 0;2^64. 
  
  This is done by eliminating most composites by trial division (via multiplicative inverse) of the first 65 primes. 
  Then searching for strong fermat bases that eliminate the remaining composites. This approach can be considered to
   be a hybridization of trial division and the sprp hashtables that are currently dominating the field of
   deterministic tests. Currently the latest variant of hashtable is due to Bradley Berg, and utilizes 32696 bytes
   of memory, and performs 2-primality checks for integers in the interval [2^32;2^49] and 3 for values [2^49;2^64]. 
   
   Jsprime  looks to match or exceed this performance in the worst-case. (It already far exceeds the plain 
   hashtables in the average case due to fast trial division). Some improvements over known tests is the reduction of the threshold 
   for 2 sprp tests from 2^32 to 2^35.
  
  While this implementation may be the fastest currently known (especially in the interval 2^32;2^35), it makes no claim as 
  such due to the fact that further optimizations are trivial, and it is likely that others have written faster
   variants privately. 
 
  
  Some benchmarks on i5-10400 processor, single thread, all numbers between the intervals are checked
  
  2^32-2^33   274.888243128s
  2^33-2^34   740.397134887s
  2^34-2^35  1791.635895877s
   
  
  
 
    Copyright (C) 2022  J.A Sory under GPLv3 <jasory at rust-cas dot org>

  Developed with the assistance of weak pseudoprime tables computed by Jan Feitsma and William Galway, 
  a strong fermat test due to Miller and Rabin, and extensive original research. 
  
  

*/

   // Multiplicative inverse of the first 64 primes (minus 2) over the ring Z[2^64]
 const PRIME_INV_64 : [u64;64] = [
 
   0xaaaaaaaaaaaaaaab, 0xcccccccccccccccd, 0x6db6db6db6db6db7, 0x2e8ba2e8ba2e8ba3, 
   0x4ec4ec4ec4ec4ec5, 0xf0f0f0f0f0f0f0f1, 0x86bca1af286bca1b, 0xd37a6f4de9bd37a7,
   0x34f72c234f72c235, 0xef7bdef7bdef7bdf, 0x14c1bacf914c1bad, 0x8f9c18f9c18f9c19,
   0x82fa0be82fa0be83, 0x51b3bea3677d46cf, 0x21cfb2b78c13521d, 0xcbeea4e1a08ad8f3,
   0x4fbcda3ac10c9715, 0xf0b7672a07a44c6b, 0x193d4bb7e327a977, 0x7e3f1f8fc7e3f1f9,
   0x9b8b577e613716af, 0xa3784a062b2e43db, 0xf47e8fd1fa3f47e9, 0xa3a0fd5c5f02a3a1, 
   0x3a4c0a237c32b16d, 0xdab7ec1dd3431b57, 0x77a04c8f8d28ac43, 0xa6c0964fda6c0965, 
   0x90fdbc090fdbc091, 0x7efdfbf7efdfbf7f, 0x3e88cb3c9484e2b , 0xe21a291c077975b9, 
   0x3aef6ca970586723, 0xdf5b0f768ce2cabd, 0x6fe4dfc9bf937f27, 0x5b4fe5e92c0685b5, 
   0x1f693a1c451ab30b, 0x8d07aa27db35a717, 0x882383b30d516325, 0xed6866f8d962ae7b, 
   0x3454dca410f8ed9d, 0x1d7ca632ee936f3f, 0x70bf015390948f41, 0xc96bdb9d3d137e0d, 
   0x2697cc8aef46c0f7, 0xc0e8f2a76e68575b, 0x687763dfdb43bb1f, 0x1b10ea929ba144cb, 
   0x1d10c4c0478bbced, 0x63fb9aeb1fdcd759, 0x64afaa4f437b2e0f, 0xf010fef010fef011, 
   0x28cbfbeb9a020a33, 0xff00ff00ff00ff01, 0xd624fd1470e99cb7, 0x8fb3ddbd6205b5c5, 
   0xd57da36ca27acdef, 0xee70c03b25e4463d, 0xc5b1a6b80749cb29, 0x47768073c9b97113, 
   0x2591e94884ce32ad, 0xf02806abc74be1fb, 0x7ec3e8f3a7198487, 0x58550f8a39409d09,
 
  ]; 
 
 
 
 const BASE_32 : [u8;256] = [

21,30,20,7,11,11,52,2,17,20,47,10,5,5,41,66,7,13,41,15,
28,34,21,29,26,2,39,94,5,18,15,6,43,10,122,59,51,10,19,
11,24,14,15,14,10,22,11,14,34,17,19,5,26,5,31,13,5,22,
42,39,38,18,22,7,7,7,37,11,7,3,3,97,7,29,41,11,13,6,33,
10,15,10,11,26,38,88,12,19,39,15,18,15,10,5,2,15,12,47,
42,2,39,18,38,24,12,29,6,47,13,3,18,3,12,40,12,3,10,66,
10,11,35,30,39,5,15,6,3,3,35,22,2,18,11,3,13,26,21,5,
14,34,10,19,3,7,35,17,34,11,2,14,5,2,15,3,2,14,13,15,7,
23,6,11,7,7,5,2,28,26,2,5,52,22,10,13,18,7,14,5,15,11,
11,21,13,12,21,7,20,11,71,10,14,3,11,15,13,7,31,10,20,7,
10,2,6,2,2,19,11,2,3,5,5,14,2,23,5,7,30,11,5,7,39,21,21,
24,2,23,6,5,5,15,11,12,3,13,6,15,3,17,3,7,11,22,2,5,7,3,
50,22,5,7,28,18,11,13,12,53,

];

 const BASE_33 : [u8;512] = [
 6,28,11,17,2,6,3,47,2,5,7,5,2,31,2,
10,21,6,13,7,3,6,12,5,7,12,15,21,
6,14,2,11,6,3,6,3,5,2,11,5,14,7,
21,3,6,17,7,2,2,6,15,6,7,5,15,13,
3,5,10,37,6,6,2,13,7,17,5,3,5,6,12,
19,14,6,11,7,3,22,7,10,2,2,17,3,5,
17,7,7,21,13,6,13,6,3,12,10,12,6,6,
5,11,3,15,3,33,24,2,6,2,12,7,12,2,
7,13,3,5,13,5,5,23,10,2,2,15,10,2,
10,30,22,38,19,5,19,7,6,5,3,3,11,
2,11,2,3,6,18,5,7,2,6,17,13,5,6,2,
13,11,2,6,2,13,10,7,5,12,15,2,7,6,
15,5,5,15,29,5,6,14,5,2,14,7,23,3,
2,19,11,5,6,5,11,14,7,11,3,10,2,5,
2,5,6,17,30,10,2,21,13,11,21,19,3,
14,19,5,5,21,6,6,7,5,6,5,2,10,12,3,
12,23,7,2,7,15,3,5,7,2,3,5,13,20,
41,7,11,5,2,5,12,5,7,13,14,2,10,23,
13,2,2,12,15,11,7,11,10,6,10,13,3,
14,10,10,11,2,6,13,3,11,5,14,2,10,
2,10,2,7,6,7,15,3,2,26,5,15,7,2,10,
3,3,5,2,13,6,6,2,12,5,7,2,3,12,13,
2,5,3,3,3,10,17,7,2,11,30,3,14,10,
3,10,6,13,3,5,2,3,2,5,14,24,2,13,
23,6,5,10,5,10,3,21,10,2,5,5,5,3,
21,6,5,3,2,6,10,10,2,2,7,19,14,10,
11,10,2,5,5,2,10,5,5,6,3,11,2,2,69,
11,6,2,2,5,7,14,11,15,5,2,5,3,5,6,
23,5,3,3,2,10,11,2,10,3,2,12,11,10,
5,11,11,3,5,13,3,7,2,7,6,6,11,2,7,
2,6,7,5,2,7,2,3,2,2,5,3,22,13,2,5,
5,5,7,11,6,2,5,2,11,11,5,10,6,19,
10,12,7,2,5,13,3,7,3,5,2,2,2,2,2,
6,2,11,3,2,6,7,17,2,2,3,17,12,7,2,
5,3,5,2,5,10,14,2,10,6,6,12,12,7,12,
3,14,5,2,2,19,2,6,14,7,3,10,2,
 ];
 
 const BASE_34 : [u8;512] = [
 23, 51,71,23,35,2,17,10,23,39,33,10,34,2,39,6,46,
6,14,7,2,20,5,2,2,3,47,11,5,3,31,12,34,2,20,
71,24,10,7,31,2,11,45,10,22,11,14,14,26,7,21,
14,6,31,31,15,10,7,5,11,43,21,15,82,11,26,2,
13,6,5,26,7,23,15,10,11,29,30,34,3,11,3,38,6,
14,6,17,6,17,10,18,6,13,23,13,41,17,11,10,14,
14,5,20,20,19,29,21,12,17,15,30,68,19,11,2,13,
17,59,5,23,13,26,21,33,7,2,6,7,19,66,41,28,3,
13,13,3,6,15,2,57,20,11,19,6,31,38,7,10,15,2,
2,19,2,21,6,5,3,23,3,10,5,39,12,15,39,7,18,2,3,
10,2,28,14,12,2,6,17,6,13,6,7,18,35,10,19,6,15,
13,15,15,2,7,5,20,15,21,3,10,19,40,39,3,10,21,7,
13,30,3,6,13,5,12,2,17,50,22,23,15,20,15,5,3,37,
23,15,14,5,3,20,10,10,13,21,10,28,17,3,6,10,13,
11,7,5,7,14,18,5,10,11,10,21,7,6,3,13,13,13,18,
11,39,11,5,35,22,2,13,20,3,18,7,11,5,11,7,70,23,
11,10,11,11,6,5,11,18,3,17,7,26,12,6,11,7,3,5,10,
21,19,6,3,26,19,2,19,33,3,35,13,19,43,11,5,6,5,10,
29,23,23,7,11,10,6,2,5,5,2,14,11,31,2,3,7,6,2,15,
2,17,7,6,17,7,10,5,12,6,14,10,17,10,13,7,6,28,5,45,
18,13,3,21,7,13,10,20,17,17,2,5,5,3,18,2,14,7,6,7,12,
2,2,5,15,5,6,26,3,5,5,14,12,28,15,2,2,11,6,15,7,15,5,
2,5,19,15,2,10,12,7,10,13,13,5,15,3,2,7,3,18,42,7,11,
2,2,6,6,6,15,11,29,29,3,3,3,2,7,3,5,21,3,2,14,24,2,6,
34,6,7,5,33,19,10,10,6,3,10,6,5,5,2,5,2,10,10,19,14,
17,6,7,5,30,5,14,11,18,13,5,14,17,2,6,2,21,12,11,30,
18,7,10,2,6,3,10,5,2,10,30,20,5,2,7,7,14,11,21,26,3,
10,11,2,3,5,11,18,5,19,
 ];
  // sprp-2
 const BASE_35 : [u8;32] = [
  10,45,34,55,15,14,37,13,58,38,31,61,10,61,10,13,17,3,7,45,21,19,7,15,3,15,5,5,35,3,47,5,
 ];
 
 const BASE_36 : [u8;32] = [
 22,154,53,41,19,55,35,31,7,186,161,5,59,17,13,19,23,23,3,13,43,23,10,118,39,21,14,5,5,3,33,21,
 ];
 
 const BASE_37 : [u8;64] = [
 33,11,14,46,21,39,11,21,39,11,7,5,23,7,66,46,5,17,19,58,3,19,29,42,19,5,13,5,3,5,7,7,57,23,21,11,
 39,19,19,5,22,15,3,19,5,53,17,17,3,5,35,78,17,30,10,7,5,15,3,19,31,11,7,3,
 ];
 
 const BASE_38 : [u8;64] = [
   43,23,46,94,101,13,45,33,86,17,97,15,153,17,29,7,15,163,85,35,43,61,82,3,11,5,43,13,11,21,71,70,
   13,61,53,3,7,11,15,15,37,45,41,21,5,29,41,35,5,19,51,47,95,41,3,43,5,13,7,129,17,15,70,19,
 ];
 
 const BASE_39 : [u8;128] = [
    21,38,17,31,23,7,41,13,17,22,23,3,19,17,11,31,
    11,13,3,23,13,79,5,17,11,19,17,45,5,15,5,22,23,
    14,15,3,22,13,119,29,15,7,42,11,31,19,3,21,35,
    19,45,5,79,11,11,14,43,3,15,7,3,7,15,14,21,21,
    23,3,13,3,13,33,78,13,15,5,7,7,17,3,3,5,39,13,
    15,13,7,19,3,21,65,13,23,21,3,15,22,17,5,5,10,
    5,3,3,43,31,15,30,7,5,11,7,10,3,3,5,3,5,17,10,
    3,3,15,3,3,5,10,3,
 ];
 
 const BASE_40 : [u8;256] = [
    5,7,35,23,15,7,13,5,7,15,11,11,5,5,15,
    7,5,17,29,3,15,37,13,17,7,5,17,5,5,15,
    3,23,29,11,13,15,7,11,41,29,13,5,19,3,
    7,7,17,5,3,5,3,11,5,5,3,7,17,5,10,7,3,
    29,37,5,5,5,7,5,29,3,7,7,26,11,3,11,19,
    3,3,11,3,3,11,3,7,5,13,11,11,13,13,11,
    11,11,13,3,11,3,5,11,23,5,5,11,5,5,13,
    3,7,5,29,17,15,5,3,11,5,28,13,33,5,7,
    15,11,21,7,5,5,3,11,13,3,13,7,5,5,7,17,
    5,10,7,7,3,13,3,17,13,7,3,3,5,17,3,3,
    15,5,13,3,5,5,5,3,5,5,10,3,13,13,11,3,
    5,11,11,13,5,7,13,3,3,19,5,5,3,3,3,3,
    5,3,5,13,11,3,5,3,7,3,7,3,3,13,5,33,14,
    15,6,3,3,13,7,3,3,11,5,5,7,15,3,26,14,
    23,3,3,11,3,3,5,5,3,5,3,5,11,3,15,3,5,
    3,5,22,5,7,15,5,5,3,39,7,5,15,5,5,6,3,
    15,5,5,
 ];
 
 const BASE_41 : [u8;256] = [
 
   30,7,5,29,38,17,21,7,31,7,5,3,53,5,
   10,13,43,7,15,11,29,13,13,13,13,15,
   15,5,42,7,5,3,17,7,3,37,3,3,13,21,
   70,5,3,3,7,7,13,11,33,69,11,35,7,3,
   3,11,17,7,11,3,7,13,13,5,7,22,7,7,
   3,7,7,5,14,3,5,10,3,7,21,11,3,11,7,
   3,33,10,3,10,23,39,5,3,3,7,11,15,7,
   7,23,3,21,17,46,7,41,7,14,47,13,7,
   37,21,3,17,26,13,3,23,5,11,23,5,3,
   11,13,31,3,3,15,10,5,5,23,10,11,5,
   5,23,21,3,3,5,3,7,11,5,11,3,19,3,11,
   19,3,39,15,5,11,5,3,3,11,15,5,15,17,
   5,5,35,22,13,21,5,7,11,3,7,3,3,7,14,
   17,5,11,3,3,5,5,15,34,13,5,3,3,7,13,
   11,5,11,6,11,11,21,15,5,5,7,3,5,11,
   7,19,5,19,10,3,35,5,7,23,5,17,5,5,38,
   3,5,51,6,15,3,7,11,13,11,3,23,3,13,
   11,5,31,17,3,17,31,11,3,5,7,17,5,5,
   7,13,21,13,
 ];
 
 const BASE_42 : [u8;256] = [
    26,115,5,115,11,15,93,26,15,7,11,73,6,55,
    3,126,39,31,67,55,67,29,11,17,15,41,13,
    41,53,15,12,74,23,13,58,19,29,11,33,15,
    7,19,65,21,15,15,7,149,15,15,26,3,5,7,
    31,43,13,11,5,11,37,55,3,14,5,75,17,30,
    75,15,70,38,7,3,38,13,31,78,31,7,23,99,
    5,7,73,19,60,10,5,15,15,5,26,5,3,83,33,
    13,47,66,38,19,17,3,91,26,17,30,31,21,
    17,29,15,11,13,17,7,7,99,3,21,137,89,
    14,43,15,13,7,19,35,17,14,19,7,23,5,13,
    29,17,5,15,15,3,10,93,37,37,11,7,39,11,
    41,19,15,37,13,15,19,13,19,41,5,5,5,5,7,
    15,7,11,119,39,5,11,5,13,39,13,22,29,42,
    13,17,7,13,5,3,39,5,31,14,3,13,7,17,11,
    19,5,55,7,3,5,7,15,13,5,15,3,14,21,29,
    17,55,5,5,59,7,41,13,65,7,57,5,15,21,29,
    29,10,15,23,15,95,5,5,3,42,53,15,7,51,
    15,38,15,11,33,11,17,57,74,3,5,31,13,23,
    7,13,7,
 ];
 /*
 const BASE_43 : [u8;512] = [ // error in generation
 
 ];
 */
 const BASE_44 : [u8;512] = [
   22,237,53,17,58,17,14,41,15,29,11,13,83,
5,5,15,14,31,21,15,5,3,17,3,65,23,31,38,
39,173,13,29,34,7,3,13,7,37,5,5,31,15,31,
14,7,10,7,5,13,10,14,51,35,17,33,11,51,
15,23,29,13,53,43,23,33,3,78,19,35,46,13,
21,33,17,17,7,19,11,55,22,11,151,11,7,5,
15,41,3,11,6,7,30,51,5,5,3,5,23,26,15,5,
29,3,7,13,13,13,15,38,3,23,13,34,5,15,47,
5,13,47,11,7,5,23,41,15,39,5,5,6,13,15,3,
7,3,21,3,19,5,59,45,7,15,23,43,33,3,5,21,
21,3,43,105,6,11,21,3,26,3,5,3,3,11,47,5,
6,107,13,10,14,11,5,5,73,11,5,29,13,19,5,
5,3,13,11,63,82,53,22,5,65,17,43,26,3,3,
3,21,11,43,55,15,29,3,5,13,5,5,3,3,33,51,
15,5,11,19,29,45,3,3,3,10,23,33,3,33,5,
15,3,15,3,13,51,7,5,42,11,19,3,23,23,13,
13,15,5,13,21,14,17,5,7,7,15,57,31,13,3,
41,37,39,39,10,13,15,7,33,11,11,21,13,5,
39,13,35,21,17,17,5,17,33,3,17,5,11,21,
59,19,15,12,7,19,5,29,11,41,3,3,11,3,7,23,
15,73,5,19,13,3,5,19,11,15,23,41,3,42,7,5,
15,13,3,11,7,23,65,41,15,46,5,5,15,3,15,21,
31,7,11,15,17,15,19,5,5,35,7,13,19,6,5,15,
38,23,5,33,41,3,13,5,11,83,5,15,31,7,21,15,
13,3,13,3,3,5,3,7,7,5,11,13,13,5,5,23,39,
11,11,19,3,3,5,3,10,13,7,11,35,13,3,3,35,
3,7,10,5,33,23,13,19,15,7,19,7,11,3,13,3,
7,7,5,35,7,15,3,7,37,22,21,17,23,13,5,3,
43,11,61,5,7,67,17,17,3,11,7,11,3,21,5,3,
26,17,35,10,11,3,11,7,22,26,41,29,3,3,17,
13,15,3,7,23,15,5,11,11,7,31,37,41,5,5,5,
55,5,13,29,11,3,11,31,15,5,19,15,35,11,3,
11,11,3,19,37,7,7,7,3,3,10,3,5,11,14,11,
17,23,3,22,43,7,
 ];
 
 const BASE_45 : [u16;512] = [
  113,19,158,30,15,237,3,17,29,65,7,3,30,
7,69,31,13,3,13,3,59,7,129,21,7,35,5,5,
79,51,61,35,61,33,37,15,41,702,13,15,29,
73,35,17,21,7,70,226,19,21,23,191,35,13,
65,22,14,13,17,21,13,155,37,89,15,399,
57,55,71,86,43,7,17,69,62,7,22,71,97,51,
57,15,33,10,203,55,130,26,3,15,33,41,74,
7,82,251,7,3,45,67,5,13,17,5,3,223,13,7,
13,5,22,51,3,3,13,33,19,35,29,31,15,45,
59,21,55,41,53,19,31,31,13,42,55,57,13,
31,55,43,13,65,7,31,19,77,31,42,86,78,
71,3,65,202,57,71,21,29,15,35,61,65,7,
15,47,345,15,45,23,17,19,87,5,61,61,37,
147,29,43,55,26,117,15,19,7,3,21,73,69,
5,53,13,3,30,58,59,3,97,11,34,17,34,14,
17,42,41,5,17,51,5,55,219,15,11,86,13,41,
75,42,139,7,7,13,37,15,71,3,375,71,45,3,
87,65,46,45,29,35,3,99,33,103,11,14,51,3,
15,11,105,39,31,75,19,37,7,26,19,101,19,
38,37,5,170,231,7,69,5,3,23,31,15,31,7,
23,31,11,5,35,3,11,17,15,23,13,17,19,13,
7,43,17,45,65,15,39,11,7,34,11,3,33,29,
31,14,7,74,106,15,59,71,35,5,3,46,5,19,
74,43,39,29,33,19,33,15,11,3,19,13,7,83,
38,15,23,77,23,57,19,15,7,23,5,17,5,17,
13,110,33,29,94,21,23,5,11,13,15,37,126,
21,29,5,31,13,13,5,37,23,7,37,51,5,11,31,
29,3,15,5,15,13,3,23,3,59,34,23,21,17,3,
11,17,65,33,15,3,181,61,19,11,21,15,3,13,
7,13,7,5,3,102,15,5,23,31,78,22,13,5,3,46,
3,3,29,15,3,3,23,43,7,59,11,33,33,14,19,
43,19,15,5,43,11,11,17,30,23,7,22,3,62,47,
21,7,5,13,15,23,11,99,3,23,30,45,75,97,17,
43,69,11,110,5,11,7,15,17,11,33,11,33,15,
31,65,29,5,5,7,5,3,15,55,15,82,14,47,13,11,
7,21,23,7,5,23,15,7,19,62,5,21,5,11,7,3,3,
34,5,13,11,11,93,11,
 ];
 
 const BASE_46 : [u16;512] = [
   122,17,1047,127,434,55,5,2126,443,251,805,555,
   3,275,19,118,419,53,15,357,423,534,113,407,41,
   127,41,65,83,71,22,51,10,219,39,31,239,171,61,
   79,74,23,45,31,335,159,78,327,133,261,527,42,
   83,74,67,253,183,73,372,315,186,554,481,11,158,
   39,703,17,61,7,219,237,23,203,203,190,5,185,
   106,201,23,38,87,19,59,115,11,31,245,327,278,
   23,7,179,157,47,35,119,45,197,65,75,70,15,78,
   61,71,163,273,118,149,359,7,13,571,119,37,110,
   118,19,118,21,5,14,59,259,75,99,87,167,33,17,
   117,161,123,29,999,310,73,13,1362,101,362,330,
   59,29,79,43,19,66,57,30,295,22,309,63,145,223,
   87,465,23,166,47,41,11,1767,7,329,171,265,57,
   23,23,135,66,43,5,1581,5,154,34,7,282,23,59,
   11,21,55,103,155,51,161,29,74,127,39,34,13,59,
   301,777,13,93,23,43,23,86,7,33,59,126,131,149,
   19,158,114,39,45,209,135,7,23,10,179,42,29,
   254,7,19,7,71,111,41,282,78,102,26,173,369,33,
   7,95,151,174,19,41,73,55,41,33,141,45,17,58,
   95,95,5,70,15,326,14,17,99,119,11,57,53,23,41,
   39,19,151,11,31,205,495,15,71,69,13,135,59,21,
   35,57,35,39,13,351,38,59,51,10,77,11,95,13,15,
   249,23,62,31,155,15,211,22,279,58,82,89,53,181,
   109,69,111,78,5,15,11,95,30,13,19,117,14,13,
   111,26,58,33,111,11,37,33,55,57,37,127,389,23,
   149,15,15,15,277,53,11,75,5,73,5,115,45,75,62,
   29,111,77,35,105,19,86,495,39,141,33,15,5,131,
   31,15,53,22,17,47,22,62,3,126,7,26,183,35,44,
   55,51,23,11,35,47,7,114,5,39,122,47,70,37,43,5,
   247,254,69,22,35,79,39,23,69,13,55,61,201,130,
   21,3,15,29,15,17,58,15,42,101,19,11,41,163,79,
   70,39,26,15,30,42,29,15,38,3,129,57,31,26,13,3,
   22,59,79,37,149,101,101,5,74,46,93,153,21,110,135,
   190,66,5,165,19,33,46,29,11,57,355,39,37,13,23,17,
   15,57,65,91,17,15,29,7,41,133,103,23,318,3,97,7,3,
   61,67,183,5,91,17,37,147,59,93,17,3,163,5,37,93,145,
   37,13,
 ];
 
 const BASE_47 : [u16;512] = [
 669,1086,1959,3239,422,2754,614,1159,551,683,
755,2189,26,540,853,105,1698,270,6011,715,37,
174,229,279,153,874,233,1339,61,1109,1471,207,
562,87,959,589,153,3,53,1155,23,2907,2613,79,
371,201,105,58,994,3837,61,115,1074,2530,1015,
23,378,234,2521,3,2134,2091,159,477,2845,547,
1106,101,1094,1306,533,1015,1242,117,158,1397,
799,159,1094,787,461,637,550,402,115,137,767,
939,185,287,995,435,322,1134,1889,659,331,235,
77,102,146,791,1499,459,151,247,1181,559,271,
26,497,205,26,587,195,1422,1570,89,1465,19,510,
195,179,311,1523,407,4247,1097,897,53,205,713,
377,703,391,34,137,785,183,129,741,535,19,266,
1103,89,1029,303,1658,115,1270,518,459,97,1661,
998,706,581,258,743,165,321,313,917,922,227,62,
545,347,539,277,85,253,431,194,135,417,298,991,
763,395,477,51,61,1077,1063,265,293,123,87,47,
999,21,34,29,59,107,63,218,370,149,19,5,363,274,
19,387,77,213,463,653,714,33,213,141,182,219,171,
66,114,51,82,635,97,181,131,445,969,527,706,22,
117,1183,590,43,155,53,259,879,86,57,57,45,423,
179,127,223,1481,189,1401,355,29,477,99,43,1161,
15,117,367,954,223,43,161,15,83,626,785,506,73,
1158,967,1071,249,325,513,79,466,463,303,359,205,
13,86,181,163,137,13,179,19,158,175,110,163,82,509,
175,17,15,263,655,375,154,13,494,37,310,366,102,
245,270,246,331,373,106,138,39,401,22,533,267,77,
310,377,43,239,303,71,203,249,195,83,165,174,14,
157,429,333,7,381,35,459,55,151,46,69,69,42,499,
277,63,105,79,35,14,158,129,518,59,19,45,261,51,3,
131,223,586,91,255,539,65,157,449,1258,15,31,198,
215,110,127,31,105,499,26,325,113,87,19,514,3,26,
143,166,77,102,107,97,42,62,301,183,63,141,387,479,
453,70,131,239,419,79,7,219,23,165,735,211,185,299,
41,47,305,115,23,99,57,149,357,51,173,15,171,29,35,
71,103,71,178,41,83,1345,15,93,325,111,79,603,51,
14,178,178,215,73,5,179,30,34,129,222,99,215,3,197,
105,187,165,170,633,847,65,307,257,291,39,142,61,
21,419,5,33,34,15,43,317,191,7,159,17,261,311,17,
265,105,134,31,107,22,339,47,33,175,69,310,658,154,
117,105,117,106,249,617,89,102,
 ];
 
 const BASE_48 : [u16;512] = [
 10413,669,4965,8163,2123,3918,354,1310,15835,12421,
3879,5733,591,10782,8455,2941,12126,1779,2147,10327,
9509,51049,1025,14479,4226,18067,5586,2103,44403,4587,
1487,1499,3445,3014,531,1902,7717,4269,2438,1038,9085,
195,12115,606,5023,4199,2966,197,539,158,1434,15971,
7105,127,12493,6754,646,6771,487,31489,5178,3569,3191,
20845,2881,2041,5266,1604,1593,1901,1071,103,11962,
2285,511,8095,1053,5173,5003,651,997,3802,7594,702,
14449,3743,3897,1179,7858,3451,143,1315,15322,2273,
358,4975,865,1023,1861,17485,1502,366,3541,3493,13,
4279,5729,10289,1481,2677,5789,113,3771,505,915,2229,
213,854,19087,790,17622,7167,12323,8141,4401,1165,1705,
766,2431,759,238,781,10211,8317,401,329,1575,8834,195,
2442,1439,6655,2119,370,9954,697,683,5125,1667,249,11861,
263,2923,3941,14983,1295,1967,789,129,5415,1351,771,3779,
87,2075,1491,16585,3695,1502,119,3035,1627,70,1485,6062,
1035,2539,1805,761,3822,3210,2941,1678,537,466,589,5738,
723,945,7709,8474,199,1323,845,2214,7334,1226,8159,850,
203,623,375,765,2605,170,894,3345,7011,8135,1959,539,
2267,2423,571,2635,869,1475,231,4371,107,69,675,3295,
821,24241,1263,131,3002,1435,399,350,2835,1043,7007,
5489,501,417,6845,103,407,4827,267,786,109,422,911,
2919,1049,874,79,122,1894,406,239,1257,7341,1070,46,
29,366,599,431,759,182,4162,317,58,1131,285,2017,531,
1459,322,29,257,322,339,693,290,97,1245,789,4502,1585,
329,109,2333,1043,415,669,977,879,82,2125,2789,887,
1993,1158,34,82,1374,274,181,275,3457,1947,281,122,
1570,3201,3052,1191,582,1877,443,1081,6421,4827,1161,
3647,683,17,6357,309,937,2334,1911,31,913,2543,638,
43,226,2375,2013,13,3010,26,285,270,7,1441,918,118,
1663,1347,341,385,4667,870,799,177,678,2043,393,522,
447,226,358,41,2629,1354,261,1717,407,263,1227,635,
1835,274,522,233,1779,1405,237,2317,11,1309,466,3,451,
2933,62,431,375,375,19,571,927,1313,53,743,883,419,671,
359,45,1387,1902,969,1233,202,2649,149,403,283,355,181,
555,987,951,373,487,778,745,1074,453,735,287,358,34,178,
491,214,545,695,59,758,31,55,2191,421,1469,1813,22,133,
639,74,327,2979,4421,1306,341,1229,122,657,837,7,474,735,
1638,113,21,238,63,661,402,471,1463,99,83,4010,5269,65,
13241,1963,138,1561,373,502,246,381,2787,15,735,1347,69,
387,1589,9377,734,707,3934,187,274,65,35,1147,204,342,
549,103,111,14,95,555,431,1003,1541,1141,333,597,182,46,
429,4823,146,325,2099,53,195,475,
 ];
 
 const BASE_49 : [u8;512] = [ // base-7935   First triple base check
 3,7,3,33,3,7,3,7,7,3,3,7,11,3,7,13,
7,7,13,7,5,5,19,7,3,5,13,3,5,11,11,
7,3,7,7,13,3,13,11,3,5,5,3,13,29,7,
7,7,14,13,11,3,3,7,31,5,3,3,11,13,
7,5,5,3,10,5,3,3,5,3,3,3,5,26,7,3,3,
3,3,5,7,11,34,5,13,3,5,13,11,5,7,7,
3,7,3,5,5,14,3,7,3,11,23,3,14,7,5,
5,17,7,5,13,13,3,7,3,3,3,5,3,3,7,3,
3,11,5,5,3,3,3,7,5,5,5,3,3,3,13,5,5,
7,3,3,5,7,28,7,3,3,7,3,3,7,7,3,21,11,
13,7,11,3,3,7,14,3,11,7,7,11,5,11,19,
3,3,3,7,3,7,7,3,3,5,10,15,11,19,13,
17,3,3,3,3,7,3,3,5,10,17,11,5,3,3,3,
5,3,3,3,7,7,3,3,7,10,3,3,7,15,14,3,5,
3,3,13,3,7,3,7,21,3,7,13,3,13,3,3,3,
3,7,13,5,21,7,3,11,3,3,7,7,7,11,14,7,
3,13,7,23,14,7,3,11,3,11,11,3,5,3,3,
13,7,3,3,3,11,13,3,7,3,3,7,3,5,5,5,
13,3,11,11,3,7,3,3,7,7,11,3,3,11,5,
7,3,3,7,3,7,3,7,3,3,5,3,7,5,5,3,3,3,
7,3,3,3,3,10,3,3,3,7,3,13,11,5,3,7,7,
3,7,3,3,3,5,21,3,3,3,13,5,6,3,5,5,3,5,
17,5,11,3,3,7,3,5,13,11,3,3,3,5,3,3,7,
3,7,7,10,5,3,13,19,21,3,3,3,6,7,3,3,3,
7,11,3,3,5,5,3,3,7,3,7,3,5,3,3,5,5,7,
3,11,13,3,5,3,11,3,3,5,3,3,3,7,7,7,5,
3,3,7,7,5,11,7,3,3,7,7,3,3,6,3,3,3,7,
17,3,5,3,22,5,3,3,3,5,3,7,17,3,7,5,
13,17,3,3,3,3,13,3,3,7,13,3,7,13,3,3,
3,5,5,13,3,7,3,3,5,3,5,17,3,7,3,11,5,
3,3,7,3,7,3,5,3,11,17,5,3,7,3,3,19,3,
5,3,7,5,5,5,3,3,
 ];
 
 
 const BASE_50 : [u8;512] = [ // base-15
  43,55,14,43,7,11,11,14,11,7,3,21,13,7,19,
3,7,11,7,31,17,7,26,3,3,13,13,11,13,7,7,
5,3,11,3,3,11,17,13,17,23,7,23,7,11,3,3,
17,3,3,21,7,3,6,13,3,7,3,11,11,7,11,3,7,
29,7,17,7,22,7,11,7,14,13,3,3,21,33,23,3,
7,11,17,3,31,7,3,7,11,3,11,11,3,11,7,14,
7,13,13,3,3,7,19,13,17,11,31,29,3,11,19,
7,3,11,7,7,26,3,3,7,3,3,3,3,29,7,3,11,7,
11,3,7,11,7,7,3,13,7,13,11,3,11,19,11,33,
11,11,7,7,3,19,3,17,17,3,3,11,3,7,11,17,
3,42,7,11,7,7,7,13,13,63,3,7,3,3,3,39,13,
11,13,7,7,3,31,11,11,7,3,7,7,21,13,19,11,
7,17,3,14,17,11,19,3,7,13,11,7,3,26,13,7,
13,11,14,11,22,7,31,13,7,19,7,7,17,3,19,
7,17,7,11,7,7,3,7,7,3,3,14,7,11,21,7,21,3,
7,11,11,3,19,7,3,13,13,7,7,11,7,7,7,13,3,
7,3,29,14,3,13,11,29,13,3,3,3,11,3,3,21,3,
6,5,7,3,7,3,11,11,7,13,13,21,11,7,3,3,3,3,
19,3,17,17,3,7,7,3,17,3,7,17,13,3,13,3,13,
3,3,7,19,7,13,3,13,7,7,7,29,3,3,3,7,7,7,3,
17,13,7,3,21,14,13,3,11,3,21,11,3,11,3,11,
13,13,11,3,6,13,7,3,3,3,11,17,7,7,14,3,7,3,
29,3,3,11,7,7,11,13,7,3,7,11,3,11,11,3,6,3,
3,3,3,11,3,13,7,3,3,7,3,7,11,13,7,7,3,7,7,
3,19,7,13,11,13,11,7,3,17,7,3,13,7,13,3,3,
3,6,7,11,11,13,7,3,21,11,19,3,11,7,7,13,3,
7,7,7,13,7,13,3,7,11,3,17,14,3,17,3,3,3,7,
7,17,21,13,13,7,19,7,13,19,3,7,3,7,7,7,7,
11,7,11,11,6,3,13,19,7,7,3,11,19,17,7,3,11,
7,11,10,3,3,3,11,7,3,7,13,39,3,3,3,7,5,7,
11,3,11,33,3,7,
 ];
 
 const BASE_51 : [u8;512] = [ // base-15
 11,107,7,3,14,35,19,13,13,3,14,11,7,3,31,3,14,
11,3,34,7,11,22,34,59,31,7,35,55,7,3,11,3,11,
53,22,3,39,7,41,13,22,7,19,3,13,19,77,7,7,59,
6,19,17,33,7,7,22,21,31,19,59,3,39,85,29,22,
10,11,70,11,33,61,11,31,7,7,5,7,3,39,23,7,11,
3,23,3,7,13,6,11,23,31,23,3,7,13,17,13,13,17,
69,47,17,11,11,7,13,13,11,7,13,19,7,3,5,35,
11,17,3,7,17,38,31,13,13,7,31,7,7,22,7,7,11,
7,33,13,23,13,11,13,7,14,3,11,19,3,3,7,3,3,3,
17,17,3,33,7,3,23,65,14,11,17,23,3,3,7,23,3,3,
3,31,3,7,7,21,7,11,17,3,19,19,3,29,13,7,3,7,
11,7,7,5,7,11,14,17,7,7,6,19,14,3,3,17,7,19,
7,3,5,3,17,3,14,3,19,17,7,3,13,3,19,11,17,3,
5,17,13,23,13,23,53,13,13,13,7,3,7,11,11,7,
17,3,19,13,21,85,3,7,3,7,19,7,11,13,7,13,17,
3,17,3,7,69,59,31,37,7,7,7,21,3,11,13,3,11,
13,13,3,13,3,13,17,17,13,13,17,3,7,7,7,11,33,
7,19,17,3,21,13,19,7,3,3,3,11,13,11,38,29,17,
14,3,11,7,3,3,13,3,26,39,7,21,17,3,7,13,21,7,
13,3,7,3,13,11,17,19,7,7,7,11,23,22,11,3,3,7,
3,7,17,17,7,7,3,17,7,7,11,19,3,5,3,17,19,22,
7,11,3,3,3,31,22,19,7,11,3,7,21,3,3,7,13,11,
35,17,17,13,19,3,3,11,43,21,38,19,38,10,3,7,
11,11,17,13,13,3,3,17,3,3,6,19,3,13,11,3,14,
3,3,3,29,3,19,11,3,13,11,11,3,21,3,11,19,19,
3,3,11,3,7,6,10,7,19,3,13,13,19,11,11,31,3,3,
39,3,3,7,22,3,31,7,14,7,3,26,7,13,13,11,7,3,3,
3,11,11,7,17,3,14,7,7,7,31,11,21,3,3,3,7,7,7,
11,7,7,3,7,11,3,3,17,3,7,17,7,23,7,17,7,3,13,
7,3,13,13,6,23,11,
 ];
 /*
 const BASE_52 : [u16;256] = [
 
 ];
 
 const BASE_53 : [u16;256] = [
 
 ];
 
 const BASE_54 : [u16;256] = [
 
 ];
 
 const BASE_55 : [u16;256] = [
 
 ];
 
 const BASE_56 : [u16;256] = [
 
 ];
 
 const BASE_57 : [u16;256] = [
 
 ];
 
 const BASE_58 : [u16;256] = [
 
 ];
 
 const BASE_59 : [u16;256] = [
 
 ];
 
 const BASE_60 : [u16;256] = [
 
 ];
 
 const BASE_61 : [u16;256] = [
 
 ];
 
 const BASE_62 : [u16;256] = [
 
 ];
 
 const BASE_63 : [u16;256] = [
 
 ];
*/

fn modpow(x : u64,mut  pow: u64, modulus: u64)-> u64{ 

  let mut z = 1u128;
  let mut base = x.clone() as u128;
  let n = modulus as u128;

 while pow > 1 {
  
   if pow%2 == 0 {
      base = base*base % n ;
      pow>>=1;
   }
  
  else{
  
   z = base*z % n;
   base = base*base % n;
   pow=(pow-1)>>1;  
   
 }
 }

 (base*z % n) as u64

}


fn sprp_64(p: u64, base: u64)->bool{// checks if base^p = 1 mod p  or base^(d*2^n)= -1 for some n  
     let p_minus = p-1;
     let zeroes = p_minus.trailing_zeros() as u64; // Breaks number down to p= d*2^n -1
     let d = p_minus>>zeroes;
     let mut x = modpow(base,d, p); // base^d mod p
     if x == 1u64 || x==p_minus{   // checks if base^p = 1 mod p  or base^(d*2^n)= -1
       return true
       }
    for _ in 0..zeroes-1{// checks for all d*2^zeroes. One is subtracted since d*2^n was already checked above
     x = ((x as u128 * x as u128)%p as u128) as u64;//modpow(x, 2, p);
     if x == p_minus {       // if any d*2^zeroes = p-1  then it passes
       return true
     }
    }
    return false        // otherwise it fails
 }


   // Input and integer between 2^32-2^37
 fn rcprime(x: u64) -> bool{
 
  if x&1 == 0{return false}
  
   for i in PRIME_INV_64[..].iter(){
      if x*i < x{
        return false
      }
  }
  
  
   let bitlen = 32-x.leading_zeros();

   match bitlen{
                                                                   //  Upper bounds
   1  => sprp_64(x,BASE_32[((x^0x100000000)>>24) as usize] as u64), // 2^33
   2  => sprp_64(x,BASE_33[((x^0x200000000)>>24) as usize] as u64), // 2^34
   3  => sprp_64(x,BASE_34[((x^0x400000000)>>25) as usize] as u64), // 2^35
   4  => if !sprp_64(x,2){return false} else{sprp_64(x, BASE_35[((x^0x800000000)>>30) as usize] as u64)}, //2^36
   5  => if !sprp_64(x,2){return false} else{sprp_64(x, BASE_36[((x^0x1000000000)>>31) as usize] as u64)},//2^37
   6  => true,
   7  => false,
   8  => false,
   9  => false,
   10 => false,
   11 => false,
   12 => false,
   13 => false,
   14 => false,
   15 => false,
   16 => false,
   17 => false,
   18 => false,
   19 => false,
   20 => false,
   21 => false,
   22 => false,
   23 => false,
   24 => false,
   25 => false,
   26 => false,
   27 => false,
   28 => false,
   29 => false,
   30 => false,
   31 => false,
   32 => false,
   _  => false, 
   }
  
 }
 

  
